usethis::use_mit_license("Eric Ekholm")
library(httr)
library(jsonlite)
library(sf)
ms_bounds <- 'https://services3.arcgis.com/TsynfzBSE6sXfoLq/ArcGIS/rest/services/Administrative/FeatureServer/10/query?outFields=*&where=1%3D1&f=json'
# tst <- GET(ms_bounds)
#
# resp <- content(tst, as  = "parsed", type = "application/json")
#
# df <- fromJSON(resp)
#this works!
tst2 <- st_read(ms_bounds)
tst <- GET(ms_bounds)
ms_meta <- 'https://services3.arcgis.com/TsynfzBSE6sXfoLq/ArcGIS/rest/services/Administrative/FeatureServer/10/'
aa <- GET(ms_meta)
View(aa$content)
?content
ms_meta <- 'https://services3.arcgis.com/TsynfzBSE6sXfoLq/ArcGIS/rest/services/Administrative/FeatureServer/10?f=pjson'
aa <- GET(ms_meta)
cont <- content(aa, as = "parsed", type = "application/json")
cont
cont$name
fetch_geospace_nms <- function(feature_num) {
url <- paste0('https://services3.arcgis.com/TsynfzBSE6sXfoLq/ArcGIS/rest/services/Administrative/FeatureServer/', feature_num, '?f=pjson')
tmp <- GET(url)
cont <- content(tmp, as = "parsed", type = "application/json")
cont$name
}
t1 <- fetch_geospace_nms(10)
t2 <- fetch_geospace_nms(9)
?safely
safe_fetch_geospace_nms <- safely(fetch_geospace_nms)
safe_fetch_geospace_nms <- purrr::safely(fetch_geospace_nms)
xx <- safe_fetch_geospace_nms(10)
xx
#trying to explore names
out <- map(1:10, safe_fetch_geospace_nms)
#trying to explore names
out <- purrr::map(1:10, safe_fetch_geospace_nms)
out
View(out)
out2 <- purrr::transpose(out)
out2$result
c(out2)
c(out2$result)
unlst(out2$result)
unlist(out2$result)
fetch_geospace_nms <- function(feature_num) {
url <- paste0('https://services3.arcgis.com/TsynfzBSE6sXfoLq/ArcGIS/rest/services/Administrative/FeatureServer/', feature_num, '?f=pjson')
tmp <- GET(url)
cont <- content(tmp, as = "parsed", type = "application/json")
cont$name
}
safe_fetch_geospace_nms <- purrr::safely(fetch_geospace_nms)
#trying to explore names
out <- purrr::map(1:100, safe_fetch_geospace_nms)
out2 <- purrr::transpose(out)
out2$result
#trying to explore names
out <- purrr::map(1:10, safe_fetch_geospace_nms)
out2 <- purrr::transpose(out)
out2
library(httr)
library(httr)
fetch_geospace_nms <- function(feature_num) {
url <- paste0('https://services3.arcgis.com/TsynfzBSE6sXfoLq/ArcGIS/rest/services/Administrative/FeatureServer/', feature_num, '?f=pjson')
tmp <- GET(url)
cont <- content(tmp, as = "parsed", type = "application/json")
cont$name
}
safe_fetch_geospace_nms <- purrr::safely(fetch_geospace_nms)
#trying to explore names
out <- purrr::map(1:100, safe_fetch_geospace_nms)
out2 <- purrr::transpose(out)
#alright -- this is the process for when I return to this
res <- unlist(out2$result)
out2$result
nominees <- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2021/2021-09-21/nominees.csv')
glimpse(nominees)
dplyr::glimpse(nominees)
x <- sf::st_read("https://services3.arcgis.com/TsynfzBSE6sXfoLq/ArcGIS/rest/services/Administrative/FeatureServer/15/query?outFields=*&where=1%3D1")
x <- sf::st_read("https://services3.arcgis.com/TsynfzBSE6sXfoLq/ArcGIS/rest/services/Administrative/FeatureServer/15/query??f=pjson1")
x <- sf::st_read("https://services3.arcgis.com/TsynfzBSE6sXfoLq/ArcGIS/rest/services/Administrative/FeatureServer/15/query?f=pjson1")
x <- sf::st_read("https://services3.arcgis.com/TsynfzBSE6sXfoLq/ArcGIS/rest/services/Administrative/FeatureServer/15/query?f=pjson")
x <- sf::st_read("https://services3.arcgis.com/TsynfzBSE6sXfoLq/ArcGIS/rest/services/Administrative/FeatureServer/15/?f=pjson")
x <- sf::st_read('https://services3.arcgis.com/TsynfzBSE6sXfoLq/ArcGIS/rest/services/Administrative/FeatureServer/10/query?outFields=*&where=1%3D1&f=json')
library(tidyverse)
ggplot(tst2) +
geom_sf(aes(fill = SchoolName)) +
theme_void()
ggplot(x) +
geom_sf(aes(fill = SchoolName)) +
theme_void()
library(httr)
library(jsonlite)
ms_meta <- 'https://services3.arcgis.com/TsynfzBSE6sXfoLq/ArcGIS/rest/services/Administrative/FeatureServer/10?f=pjson'
aa <- GET(ms_meta)
cont <- content(aa, as = "parsed", type = "application/json")
cont$name
library(rvest)
admin <- read_hmtl('https://services3.arcgis.com/TsynfzBSE6sXfoLq/ArcGIS/rest/services/Administrative/FeatureServer')
admin <- read_html('https://services3.arcgis.com/TsynfzBSE6sXfoLq/ArcGIS/rest/services/Administrative/FeatureServer')
?html_elements
items <- admin %>% html_elements("li")
items
items[1]
aa <- items[1]
aa <- items[1] %>% as.character()
nms <- str_replace_all(aa, "(.*)>(\\D+)</a>\((\\d+)</li>", "//2")
nms <- str_replace_all(aa, "(.*)>(\\D+)</a>\\((\\d+)</li>", "//2")
nms
tt <- items %>% html_elements("a")
tt
html_table(tt)
html_attrs(tt)
bb <- as.character(tt[1])
bb
zz <- str_replace_all(bb, "^.*>(\\D+)<.*", "\\1")
aa <- items[1] %>% as.character()
nms <- str_replace_all(aa, "(.*)>(\\D+)</a>\\((\\d+)</li>", "\\2")
nms <- map_chr(tt, ~str_replace_all(as.character(.x), "^.*>(\\D+)<.*", "\\1"))
tt
#and getting numbers
nums <- 0:(length(items)-1)
cbind(nums, nms)
usethis::use_pipe()
home <- read_html('https://services3.arcgis.com/TsynfzBSE6sXfoLq/ArcGIS/rest/services')
home_items <- home %>% html_elements("li") %>% html_elements("a")
home_items
View(home_items)
nms2 <- map_chr(home_items, ~str_replace_all(as.character(.x), "^.*>(\\D+)<.*", "\\1"))
nms2
nms3 <- str_subset(nms2, "href", negate = TRUE)
extract_resources <- function(url = "https://services3.arcgis.com/TsynfzBSE6sXfoLq/ArcGIS/rest/services",
services = TRUE) {
res <- rvest::read_html(url) %>%
rvest::html_elements("li") %>%
rvest::html_elements("a")
ret <- purrr::map_chr(res, ~stringr::str_replace_all(as.character(.x), "^.*>(\\D+)<.*", "\\1"))
ret <- if (services == TRUE) {
stringr::str_subset(ret, "href", negate = TRUE)
} else
return(ret)
}
aa <- extract_resources()
aa == nms3
bb <- extract_resources("https://services3.arcgis.com/TsynfzBSE6sXfoLq/ArcGIS/rest/services/Administrative/FeatureServer")
service_url <- function(service) {
baseurl <- "https://services3.arcgis.com/TsynfzBSE6sXfoLq/ArcGIS/rest/services"
paste0(baseurl, "/", service, "/FeatureServer")
}
service_url(aa[1])
service_url(aa[2])
layers_crosswalk <- function(service) {
url <- service_url(service)
res <- extract_resources(url = url, services = FALSE)
tibble(
service = service,
layer_num = 0:(length(res) - 1),
layer = res
)
}
zz <- layers_crosswalk(aa[2])
View(zz)
xx <- layers_crosswalk(aa[1])
xx
services <- extract_resources()
crosswalk <- map_dfr(services ~layer_crosswalk)
crosswalk <- map_dfr(services, ~layer_crosswalk)
crosswalk <- map_dfr(services, ~layer_crosswalk(.x))
crosswalk <- map_dfr(services, ~layers_crosswalk(.x))
View(crosswalk)
bb <- as.character(tt[1])
zz <- str_replace_all(bb, "^.*>(\\.*)<.*$", "\\1")
tt
?html_element
?html_attrs()
html_attrs(tt)
zzz <- html_attrs(tt)
zzz
View(zzz)
tt
zz <- str_replace_all(bb, "^<a href.*>(\\.*)<.*>$", "\\1")
zz
tt[1]
zz <- str_replace_all(tt[1], "^<a href.*>(\\.*)<.*>$", "\\1")
mm <- str_match_all(bb, "<a href=\"(.*)\"")
mm
mm[,2]
mm[[1]][,2]
bb
str_remove_all(bb, mm[[1]][,2])
str_remove_all(bb, mm[[1]][,1])
mm <- str_match_all(bb, "<a href=\"(.*)\">")
mm
str_remove_all(bb, mm[[1]][,1])
str_remove_all(bb, paste0(mm[[1]][,1],"|</a>$"))
#extract link name
extract_link_name <- function(x) {
x <- as.character(x)
m <- stringr::str_match_all(x, "<a href=\"(.*)\">")
m <- m[[1]][,1]
remove_vec <- paste0(m, "|</a>")
stringr::str_remove_all(x, remove_vec)
}
extract_resources <- function(url = "https://services3.arcgis.com/TsynfzBSE6sXfoLq/ArcGIS/rest/services",
services = TRUE) {
res <- rvest::read_html(url) %>%
rvest::html_elements("li") %>%
rvest::html_elements("a")
#ret <- purrr::map_chr(res, ~stringr::str_replace_all(as.character(.x), "^.*>(\\D+)<.*", "\\1"))
# ret <- if (services == TRUE) {
#   stringr::str_subset(ret, "href", negate = TRUE)
# } else
ret <- purrr::map_chr(res, ~extract_link_name(.x))
return(ret)
}
zzz <- extract_resources()
zzz
services <- extract_resources()
crosswalk <- map_dfr(services, ~layers_crosswalk(.x))
45*12
25*3*12
make_layers_crosswalk <- function(service) {
url <- service_url(service)
res <- extract_resources(url = url, services = FALSE)
tibble(
service = service,
layer_num = 0:(length(res) - 1),
layer = res
)
}
layers_crosswalk <- map_dfr(services, ~make_layers_crosswalk(.x))
save(layers_crosswalk, here::here("data/layers_crosswalk.RData"))
?save
save(layers_crosswalk, file = here::here("data/layers_crosswalk.RData"))
glimpse(layers_crosswalk)
library(devtools)
load_all()
aa <- layers_crosswalk$layer_num[layers_crosswalk$layer == "MiddleSchoolBoundary"]
load_all()
ms_bounds <- get_geo_data(layer = "MiddleSchoolBoundary")
hs_bounds <- get_geo_data(layer = "HighSchoolBoundary")
library(tidyverse)
ggplot(hs_bounds) + geom_sf(aes(fill = SchoolName)) + theme_void()
load_all()
load_all()
es_bounds <- get_geo_data(layer = "ElementarySchoolBoundary")
ggplot(es_bounds) + geom_sf(aes(fill = SchoolName)) + theme_void()
View(layers_crosswalk)
ttt <- get_geo_data(layer = "blahblahblah")
document()
?switch()
load_all()
get_school_boundaries("elem")
load_all()
document()
aa <- get_school_boundaries("elem")
?get_school_boundaries
document()
?get_school_boundaries
?get_school_boundaries
document()
?get_school_boundaries
major_roads <- get_geo_data("Major Roads")
ggplot(major_roads) + geom_sf() + theme_void()
adr <- get_geo_data("County_Address_Service")
glimpse(adr)
unique(adr$SubdivisionName)
str_subset(unique(adr$SubdivisionName), "FOX")
ms_bounds <- get_school_boundaries("middle")
ggplot(ms_bounds) + geom_sf(aes(fill = SchoolName)) + theme_void()
buses <- get_geo_data("GRTC_Bus_Stops")
ggplot(buses) + geom_sf() + theme_void()
glimpse(adr)
library(devtools)
load_all()
layers_crosswalk$layer
adr <- get_geo_data("County_Address_Service")
offenses <- get_geo_data("Offenses")
library(tidyverse)
glimpse(adr)
adr %>% filter(str_detect(StreetName, "STERLINGWORTH")) %>% View()
glimpse(offenses)
sort(unique(offenses$SubdivisionName))
str_subset(unique(offenses$SubdivisionName), "FOXCREEK")
offenses %>% filter(str_detect(SubdivisionName, "FOXCREEK")) %>% ggplot() + geom_sf(aes(color == IncidentOffenseTypeCategory)) + theme_void()
offenses %>% filter(str_detect(SubdivisionName, "FOXCREEK")) %>% ggplot() + geom_sf(aes(color = IncidentOffenseTypeCategory)) + theme_void()
glimpse(offenses)
offenses %>% filter(str_detect(SubdivisionName, "FOXCREEK")) %>% ggplot() + geom_sf(aes(color = IncidentorOffenseTypeCategory)) + theme_void()
rds <- get_geo_data("Major Roads")
fox_crimes <- offenses %>% filter(str_detect(SubdivisionName, "FOXCREEK"))
unique(fox_crimes$CADDisposition1_Text)
us <- adr %>% filter(Address == "5930 STERLINGWORTH DR")
ggplot(fox_crimes) + geom_sf(aes(color = IncidentorOffenseTypeCategory)) + geom_sf(data = rds) + geom_sf(data = us) + theme_void()
ggplot(fox_crimes) + geom_sf(aes(color = IncidentorOffenseTypeCategory)) + geom_sf(data = us) + theme_void()
ggplot(fox_crimes) + geom_sf(aes(color = IncidentorOffenseTypeCategory)) + geom_sf(data = us, size = 2) + theme_void()
ggplot(fox_crimes) + geom_sf(aes(color = IncidentorOffenseTypeCategory)) + geom_sf(data = us, size = 4, shape = 4) + theme_void()
ggplot(fox_crimes) + geom_sf(aes(color = IncidentorOffenseTypeCategory)) + geom_sf(data = us, size = 4, shape = 5) + theme_void()
?geom_sf
xs <- c(min(fox_crimes$DimLocationLongitude), max(fox_crimes$DimLocationLongitude))
ys <- c(min(fox_crimes$DimLocationLatitude), max(fox_crimes$DimLocationLatitude))
ggplot(fox_crimes) + geom_sf(aes(color = IncidentorOffenseTypeCategory)) + geom_sf(data = rds, xlim = xs, ylim = ys) + geom_sf(data = us) + theme_void()
ggplot(fox_crimes) + geom_sf(aes(color = IncidentorOffenseTypeCategory)) + geom_sf(data = rds) + geom_sf(data = us) + theme_void() + coord_sf(xlim = xs, ylim = ys)
library(leaflet)
leaflet(fox_crimes)
leaflet(fox_crimes) %>% addTiles() %>% addMarkers(~DimLocationLongitude, ~DimLocationLatitude)
leaflet(fox_crimes %>% filter(SubidivisionName == "WYNWOOD AT FOXCREEK") addTiles() %>% addMarkers(~DimLocationLongitude, ~DimLocationLatitude)
leaflet(fox_crimes %>% filter(SubidivisionName == "WYNWOOD AT FOXCREEK") %>% addTiles() %>% addMarkers(~DimLocationLongitude, ~DimLocationLatitude)
leaflet(fox_crimes %>% filter(SubidivisionName == "WYNWOOD AT FOXCREEK") %>% addTiles() %>% addMarkers(~DimLocationLongitude, ~DimLocationLatitude)
leaflet(fox_crimes %>% filter(SubidivisionName == "WYNWOOD AT FOXCREEK")) %>% addTiles() %>% addMarkers(~DimLocationLongitude, ~DimLocationLatitude)
leaflet(fox_crimes %>% filter(SubdivisionName == "WYNWOOD AT FOXCREEK")) %>% addTiles() %>% addMarkers(~DimLocationLongitude, ~DimLocationLatitude)
library(devtools)
load_all()
#get available layers
available_layers <- layers_crosswalk$layer
save(available_layers, file = here::here("data/available_layers.RData"))
?layers_crosswalk
?autoplot
load_all()
ms_bounds <- get_school_boundaries("middle")
class(ms_bounds)
load_all()
ms_bounds <- get_school_boundaries("middle")
class(ms_bounds)
load_all()
autoplot(ms_bounds)
?ggplot2::autoplot
load_all()
autoplot(ms_bounds)
library(ggplot2)
autoplot(ms_bounds)
autoplot.chester_geo(ms_bounds)
load_all()
autoplot(ms_bounds)
autoplot.chester_geo(ms_bounds)
document()
load_all()
autoplot(ms_bounds)
document()
load_all()
autoplot(ms_bounds)
dplyr::glimpse(ms_bounds)
load_all()
autoplot(ms_bounds, fill = SchoolName)
?rlang::list2
load_all()
autoplot(ms_bounds, fill = SchoolName)
?!!!
load_all()
autoplot(ms_bounds)
autoplot(ms_bounds, fill = SchoolName)
load_all()
autoplot(ms_bounds, fill = SchoolName)
class(ms_bounds)
"chester_geo" %in% class(ms_bounds)
autoplot(palmerpenguins::penguins)
autoplot(ms_bounds)
available_layers
sort(available_layers)
schp <- get_geo_data("SchoolPoints")
autoplot(schp)
rds <- get_geo_data("MajorRoads")
rds <- get_geo_data("Major Roads")
autoplot(rds)
?dplyr::glimpse(schp)
dplyr::glimpse(schp)
library(dplyr)
glimpse(schp)
class(palmerpenguins::penguins)
load_all()
ms_bounds <- get_school_boundaries("middle")
schp <- get_geo_data("SchoolPoints")
glimpse(ms_bounds)
glimpse(mtcars)
class(ms_bounds)
zz <- class(ms_bounds)
library(palmerpenguins)
aa <- class(penguins)
head(ms_bounds)
glimpse(ms_bounds)
names(schp)
glimpse(ms_bounds)
View(ms_bounds)
ms_bounds
print(ms_bounds)
autoplot(rds) + geom_sf(data = schp, aes(color = as.character(SchoolLevel)))
autoplot(rds) + geom_sf(data = schp, aes(color = as.character(SchoolLevel)), size = 2)
load_all()
document()
load_all()
document()
